# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    container.dumper.inline_factories: true

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/DependencyInjection/'
            - '../src/bootstrap'
            - '../src/DBApplication'
            - '../src/RedisCache/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

#    App\EventListener\TerminateListener:
#        tags:
#            - { name: kernel.event_listener, event: kernel.terminate }

    App\EventListener\RequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    logger:
        class: Symfony\Component\HttpKernel\Log\Logger
        arguments: [ notice, '%kernel.logs_dir%/%kernel.environment%.log' ]
        public: true

    queue_interface:
        alias: App\Service\Queue\QueueInterface
        public: true

    App\Service\Queue\QueueInterface: '@App\Service\Queue\RedisQueue'

    App\Service\Queue\RedisQueue:
        autowire: false
        arguments: [ '@redis_connection', 'mo', ]
        public: true


    App\Service\RedisFactory: ~
    redis_connection:
        class: \Redis
        factory: [ '@App\Service\RedisFactory', 'build' ]
        arguments: [ '%env(resolve:REDIS_HOST)%' ]



    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
